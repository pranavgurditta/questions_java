import java.util.*;
class Coin_change{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number of cents");
        int n=sc.nextInt();
        System.out.println("Enter the number of denominations of coins");
        int m=sc.nextInt();
        int S[]=new int[m];
        System.out.println("Enter the denominations of coins");
        for(int i=0;i<m;i++)
            S[i]=sc.nextInt();
        Coin_change obj=new Coin_change();
        System.out.println("The number of ways to find the change are "+obj.count_brute_force(S,m,n));
        System.out.println("The number of ways to find the change are "+obj.count_memoization_wrapper(S,m,n));
        System.out.println("The number of ways to find the change are "+obj.count_DP_2D(S,m,n));
        System.out.println("The number of ways to find the change are "+obj.count_DP_1D(S,m,n));
        
    }
    
    public int count_brute_force(int[] S,int m,int n)
    {
        if(n==0)
            return 1;
        if(n<0)
            return 0;
           
        if(m==0 && n>=1)
            return 0;
        return (count_brute_force(S,m-1,n) +count_brute_force(S,m,n-S[m-1]));
    }
    public int count_memoization_wrapper(int[] S,int m,int n)
    {
        int[][] dp=new int[m][n];
        for(int [] l:dp)
            Arrays.fill(l,-1);
        return count_memoization(S,m,n,dp);
    }
    
    public int count_memoization(int[] S,int m,int n,int[][] dp)
    {
        if(m==0 && n>=1)
            return 0;
        else if(n==0)
            return 1;
        else if(n<0)
            return 0;
        else if (dp[m-1][n-1]>-1)
            return dp[m-1][n-1];
        dp[m-1][n-1]=(count_memoization(S,m-1,n,dp) +count_memoization(S,m,n-S[m-1],dp));
        return dp[m-1][n-1];
    }
    public int count_DP_2D(int[] S,int m,int n)
    {
        int[][] dp=new int[m+1][n+1];
     
        for(int j=0;j<=m;j++)
            dp[j][0]=1;
        for(int i=1;i<=n;i++)
            dp[0][i]=0;

        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=dp[i-1][j];
                if(j>=S[i-1])
                dp[i][j]+=dp[i][j-S[i-1]];
            }
        return dp[m][n];
    }  
    
    public int count_DP_1D(int[] S,int m,int n)
    {
        int[] dp=new int[n+1];
     
        dp[0]=1;
        for(int i=0;i<m;i++)
            for(int j=S[i];j<=n;j++)
            {
                dp[j]+=dp[j-S[i]];
            }
        return dp[n];
    }  
    
        
        
    }
    
    

