/*70. Climbing Stairs
Easy

4156

135

Add to List

Share
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


class Solution {
    public int climbStairs(int n) {
        if(n<0)
            return 0;
        if(n==0)
            return 1;
        
       return climbStairs(n-1)+climbStairs(n-2);
    }
}


public class Solution {
    public int climbStairs(int n) {
        return climb_Stairs(0, n);
    }
    public int climb_Stairs(int i, int n) {
        if (i > n) {
            return 0;
        }
        if (i == n) {
            return 1;
        }
        return climb_Stairs(i + 1, n) + climb_Stairs(i + 2, n);
    }
}

/* O(n) Memoization 

public class Solution {
    public int climbStairs(int n) {
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
      return climb(n,dp);
    }
    int climb(int n,int[] dp)
    {
        if(n<0)
            return 0;
        if(n==0)
            return 1;
        if(dp[n]!=-1)
            return dp[n];
        dp[n]=climb(n-1,dp)+climb(n-2,dp);
        return dp[n];
    }
}

O(N) iterative dynamic programming 
public class Solution {
    public int climbStairs(int n) {
        int[] dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++)
            dp[i]=dp[i-1]+dp[i-2];
        
        return dp[n];
    }
}

O(N) Fibonnaci approach O(1) space
*/
public class Solution {
    public int climbStairs(int n) {
        if(n==1 || n==0)
            return 1;
        int first=1;
        int second=2;
        for(int i=3;i<=n;i++)
        {
            int third=first+second;
            first=second;
            second=third;
            
        }
        
        
        return second;
    }
}
