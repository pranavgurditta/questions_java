/*300. Longest Increasing Subsequence
Medium

4423

104

Add to List

Share
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
*/

class Solution {
  
    public int lengthOfLIS(int[] nums) {
     
    // lis[i] = 1+ max (lis[j]) where 0<i<j and arr[i]<arr[j]
    // lis[i]=1 ; if no j<i for which arr[i]<arr[j]
        if(nums.length==0)
            return 0;
        int max=1;
        int lis[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
            lis[i]=1;
        
        for(int i=1;i<nums.length;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j] && lis[i]<lis[j]+1)
                    lis[i]=lis[j]+1;
                
            }
            if(max<lis[i])
                max=lis[i];
        }
        return max;
   }
}
