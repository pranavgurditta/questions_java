/* Link: https://leetcode.com/problems/largest-rectangle-in-histogram/*/

class Solution {
    public int largestRectangleArea(int[] heights) {
        
        int[] NSL=NearestSmallerToLeft(heights);
        
        int[] NSR=NearestSmallerToRight(heights);
       
        int max=0;
        for(int i=0;i<heights.length;i++)
        {
           max=Math.max(max,heights[i]*(NSR[i]-NSL[i]-1));
        }
        return max;
        
    }
    public int[] NearestSmallerToLeft(int [] heights)
    {
        Stack<Integer> st=new Stack<Integer>();
        int[] ans=new int[heights.length];
        for(int i=0;i<heights.length;i++)
        {
            if(st.isEmpty())
                ans[i]=-1;
            else if (heights[st.peek()]<heights[i])
                ans[i]=st.peek();
            else
            {
                while(!st.isEmpty() && heights[st.peek()]>=heights[i])
                    st.pop();
                if(st.isEmpty())
                    ans[i]=-1;
                else
                    ans[i]=st.peek();
            }
            st.push(i);
         }
        return ans;
    }
    
    public int[] NearestSmallerToRight(int[] heights)
    {
        Stack<Integer> st=new Stack<Integer>();
        int[] ans=new int[heights.length];
        for(int i=heights.length-1;i>=0;i--)
        {
            if(st.isEmpty())
                ans[i]=heights.length;
            else if (heights[st.peek()]<heights[i])
                ans[i]=st.peek();
            else
            {
                while(!st.isEmpty() && heights[st.peek()]>=heights[i])
                    st.pop();
                if(st.isEmpty())
                    ans[i]=heights.length;
                else
                    ans[i]=st.peek();
            }
            st.push(i);
                
        }
        return ans;
    }
    
    
}
