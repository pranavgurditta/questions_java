/*L225 :https://leetcode.com/problems/implement-stack-using-queues/
*/
class MyStack {

    /** Initialize your data structure here. */
    Queue<Integer> q1;
    Queue<Integer> q2;
    public MyStack() {
        q1=new LinkedList<Integer>();
        q2=new LinkedList<Integer>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        q1.offer(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int remove=-1;
        while(q1.size()>1)
        {
            remove=q1.poll();
            q2.offer(remove);
        }
        remove=q1.poll();
        Queue<Integer> temp=q1;
        q1=q2;
        q2=temp;
        return remove;
    }
    
    /** Get the top element. */
    public int top() {
        int remove=-1;
        while(!q1.isEmpty())
        {
            remove=q1.poll();
            q2.offer(remove);
            
        }
        Queue<Integer> temp=q1;
        q1=q2;
        q2=temp;
        return remove;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        if(!q1.isEmpty())
            return false;
        return true;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
