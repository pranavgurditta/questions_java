/**
993. Cousins in Binary Tree
Easy

472

29

Add to List

Share
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.
 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Deque<TreeNode> queue;
    public boolean isCousins(TreeNode root, int x, int y) {
        
        queue=new ArrayDeque<TreeNode>();
        queue.addLast(root);
        HashMap<Integer,TreeNode> parent=new HashMap<>();
        parent.put(root.val,null);
        
        while(!queue.isEmpty())
        {
            int levelNum=queue.size();
            List<Integer> level=new ArrayList<Integer>();
            
            for(int i=0;i<levelNum;i++)
            {
                TreeNode node=queue.removeFirst();
                if(node.left!=null)
                {
                    queue.addLast(node.left);
                    level.add(node.left.val);
                    parent.put(node.left.val,node);
                }
                if(node.right!=null)
                {   
                    queue.addLast(node.right);
                    level.add(node.right.val);
                    parent.put(node.right.val,node);
                }
            }
            if(level.contains(x) && level.contains(y))
                if(parent.get(x)!=parent.get(y))
                    return true;
            
            }
        return false;
    }
}

 
