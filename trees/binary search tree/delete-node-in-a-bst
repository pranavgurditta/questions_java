/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 Link:https://leetcode.com/problems/delete-node-in-a-bst/
 Pattern : BST
 Approach : Stated in comments

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        
        if(root==null)
            return null;
        // searching for key 
        if(key<root.val) 
            root.left=deleteNode(root.left,key);
        else if(key>root.val)
            root.right=deleteNode(root.right,key);
        
        // key found
        else
        {
            //check if only one child;
            if(root.left==null)
                return root.right;
            if(root.right==null)
                return root.left;
            
            // if two children then
            TreeNode min=findMin(root.right);
            root.val=min.val;
            root.right=deleteNode(root.right,min.val);
            
        }
        return root;
        
    }
    TreeNode findMin(TreeNode root)
    {
        while(root.left!=null)
        { if(root.left==null)
            break;
            root=root.left;
        }
        return root;
    }
}
