/*98. Validate Binary Search Tree
Medium

3247

459

Add to List

Share
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
*/
    /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
  Stack<TreeNode> stack =new Stack();
  Stack<TreeNode> lowers =new Stack();
  Stack<TreeNode> uppers =new Stack();
  
  public void update(TreeNode root, TreeNode lower, TreeNode upper) {
    stack.add(root);
    lowers.add(lower);
    uppers.add(upper);
  }

  public boolean isValidBST(TreeNode root) {
    TreeNode lower = null, upper = null;
    
    update(root, lower, upper);

    while (!stack.isEmpty()) {
      root = stack.pop();
      lower = lowers.pop();
      upper = uppers.pop();

      if (root != null)
      {
      if (lower != null && root.val <= lower.val) return false;
      if (upper != null && root.val >= upper.val) return false;
      update(root.right, root, upper);
      update(root.left, lower, root);
      }  
      }    
    return true;
  }
}
