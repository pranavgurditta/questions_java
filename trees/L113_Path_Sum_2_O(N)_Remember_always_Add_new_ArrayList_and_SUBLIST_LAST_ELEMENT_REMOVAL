/**
113. Path Sum II
Medium

1537

56

Add to List

Share
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
Accepted
313,251
Submissions
690,631


* Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> subList=new ArrayList<Integer>();
        if(root==null)
            return res;
        helper(root,res,subList,sum);
        
        return res;
    }
    public void helper(TreeNode root,List<List<Integer>> res,List<Integer> subList,int sum)
    {  
        if(root==null)
            return;
        subList.add(root.val);
       
        if(root.left==null && root.right==null && root.val==sum){
    
                res.add(new ArrayList(subList));
                subList.remove(subList.size()-1);
                return;
        }
        if(root.left!=null){
            helper(root.left,res,subList,sum-root.val);
        
        }
        if(root.right!=null){
            helper(root.right,res,subList,sum-root.val);  
        }
        
       subList.remove(subList.size()-1);
    }
    
}
