/*
https://leetcode.com/problems/populating-next-right-pointers-in-each-node
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if(root==null)
            return null;
        connectNode(root);
        Node current=root;
        while(current!=null)
        {
            connectNode(current);
            current=current.next;
            
        }
        connect(root.left);
        connect(root.right);
        return root;
    }
    Node getNextRight(Node root)
    {
        root=root.next;
        while(root!=null)
        {
            if(root.left!=null)
                return root.left;
            if(root.right!=null)
                return root.right;
            root=root.next;
        }
        return root;
    }
    void connectNode(Node root)
    {
        if(root.left!=null)
        {
            if(root.right!=null)
            {
                root.left.next=root.right;
                root.right.next=getNextRight(root);
            }
            else
            {
                root.left.next=getNextRight(root);
            }
        }
        else if (root.right!=null)
        {
            root.right.next=getNextRight(root);
           
        }
    }
}
    
