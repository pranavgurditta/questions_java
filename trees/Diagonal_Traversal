/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
 
 /* 
        Question_Link: https://www.interviewbit.com/problems/diagonal-traversal/
        
        
        Approach: 
        Make Annotated Node (Node,level)
        Make PreOrder traversal and then using that traversal keep on storing values thats are at 
        same level (same diagonal)
            If there is a right child then don't change the level.
            If there is a left child then change the level.
            
            For pictorial representation:
            https://www.autodraw.com/share/1N3CWFZ4H0NU
            
 
 */
 
class Annotated_Node
{
    TreeNode node;
    int level;
    Annotated_Node(TreeNode node,int level)
    {
        this.node=node;
        this.level=level;
    }
}
public class Solution {
    HashMap<Integer,ArrayList<Integer>> hash_map=new HashMap<>();
    public int[] solve(TreeNode node) 
    {
        bfs(new Annotated_Node(node,0));
        List<Integer> list=new ArrayList<Integer>();
        for(int i:hash_map.keySet())
            for(int k: hash_map.get(i))
                list.add(k);
        int[] answer=new int[list.size()];
        int count=0;
        for(int i: list)
            answer[count++]=i;
        return answer;
    }
    
    public void bfs(Annotated_Node node)
    {
        Stack<Annotated_Node> stack=new Stack<Annotated_Node>();
        stack.push(node);
        while(!stack.isEmpty())
        {
            Annotated_Node temp=stack.pop();
            if(!hash_map.containsKey(temp.level))
                hash_map.put(temp.level,new ArrayList<Integer>());
            hash_map.get(temp.level).add(temp.node.val);
            if(temp.node.right!=null)
               stack.push(new Annotated_Node(temp.node.right,temp.level));
            if(temp.node.left!=null)
                stack.push(new Annotated_Node(temp.node.left,temp.level+1));
            
        }
        
    }
    
    
    
}
