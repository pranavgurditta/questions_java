/**
662. Maximum Width of Binary Tree
Medium

989

224

Add to List

Share
Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class AnnotatedNode{
    TreeNode node;
    int depth,pos;
    AnnotatedNode(TreeNode node,int depth,int pos)
    {
        this.node=node;
        this.depth=depth;
        this.pos=pos;
    }
}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int left=0;
        int right=0;
        int answer=0;
        int currentDepth=0;
    
        
        Queue<AnnotatedNode> queue=new LinkedList<AnnotatedNode>();
        queue.offer(new AnnotatedNode(root,0,0));

            
        while(!queue.isEmpty())
        {
            int levelNum=queue.size();
            AnnotatedNode temp=null;
            for(int i=0;i<levelNum;i++)
            {
            temp=queue.poll();
            if(temp.node!=null){
                queue.offer(new AnnotatedNode(temp.node.left,temp.depth+1,temp.pos*2));
           
                queue.offer(new AnnotatedNode(temp.node.right,temp.depth+1,temp.pos*2+1));
             
            if(currentDepth!=temp.depth)
            {
                currentDepth=temp.depth;
                left=temp.pos;
            }
            right=temp.pos;
            }
            }
            answer= Math.max(answer,right-left+1);
        }
        return answer;    
    }
}
