/*Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Return the linked list sorted as well.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5
Example 2:

Input: 1->1->1->2->3
Output: 2->3
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        if(head==null || head.next==null)
            return head;
        ListNode current=head;
     
        ListNode dummy=new ListNode(0);
        ListNode dummyHead=dummy;
        int prev=-99;
    
        while(current!=null && current.next!=null){
            
        if(current.next.val==current.val)
        {
            
            prev=current.val;
        }   
        else 
        {
            if(current.val!=prev)
            {
            dummy.next=current;
            dummy=dummy.next;  
            
            System.out.println(dummy.val);
                    
            }
           
        }
        current=current.next;
        }
        if(current.val!=prev)
            dummy.next=current;
        else
            dummy.next=null;
        
        return dummyHead.next;    
}
}
