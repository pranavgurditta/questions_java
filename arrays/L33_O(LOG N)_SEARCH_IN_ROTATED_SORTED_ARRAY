/*33. Search in Rotated Sorted Array
Medium

4768

447

Add to List

Share
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
*/
class Solution {
    public int search(int[] nums, int target) {
        
        int low=0;
        int high=nums.length-1;
        while(low<high) // low gives index of smallest element
        {
            int mid=low+(high-low)/2;
            if(nums[mid]>nums[high])
                low=mid+1;
            else
                high=mid;
                
        }
       
        int rotation=low;
        low=0;
        high=nums.length-1;
        
        while(low<=high)
        {
            int mid= low+(high-low)/2;
             
            int realmid= (mid+rotation)%nums.length;
           
            if(nums[realmid]==target)
                return realmid;
            else if(nums[realmid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return -1;
        
    }
}
