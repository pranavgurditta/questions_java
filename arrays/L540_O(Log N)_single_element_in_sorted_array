/*540. Single Element in a Sorted Array
Medium

1209

76

Add to List

Share
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 
 */
class Solution {
    public int singleNonDuplicate(int[] nums) {
        
       return binarySearch(nums,0,nums.length-1);
        
    }

    private int binarySearch(int[] nums,int low,int high)
    {

        int result=-1;
        while(low<=high)
        {
            System.out.println(low+" "+high);
            int mid=low+(high-low)/2;
            System.out.println(mid);
            if(high==low+1){
                if(nums[low]==nums[high]){
                    return -1;
                }
            }
            if(low==high)
                return nums[low];
            if((nums[mid]!=nums[mid-1]) && (nums[mid]!=nums[mid+1]))
                return nums[mid];
            if(nums[mid]==nums[mid-1])
            {
                int temp=binarySearch(nums,low,mid);
                result=temp!=-1 ? temp: binarySearch(nums,mid+1,high); 
                return result;
            }
            else if(nums[mid]==nums[mid+1])
            { 
                int temp=binarySearch(nums,low,mid-1);
                result=temp!=-1 ? temp: binarySearch(nums,mid,high); 
                return result;
            }
            
        }
        return -1;
    }
}
