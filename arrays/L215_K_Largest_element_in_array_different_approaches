/*215. Kth Largest Element in an Array
Medium

3308

229

Add to List

Share
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note:
You may assume k is always valid, 1 ≤ k ≤ array's length.

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> queue=new PriorityQueue<>();
        
     
        
        for(int i=0;i<nums.length;i++)
            queue.add(nums[i]);
        int i=0;
        while(i++<(nums.length-k)){
            queue.poll();            
        }
        
        return queue.peek();
            
    }
}
*/
/*O(n^2) in worst case , generally O(n)*/
class Solution {
    public int findKthLargest(int[] nums, int k) {
        
        int left=0;
        int right=nums.length-1;
        
        Random random=new Random(0);
        
         
        while(left<=right)
        {
            int pivot_choosen=random.nextInt(right-left+1)+left;
            int final_pivot=partition(nums,left,right,pivot_choosen);
            
            
            if(final_pivot==(nums.length-k))
                return nums[final_pivot];
            
            else if (final_pivot < nums.length-k)
                left=final_pivot+1;
            else
                right=final_pivot-1;
        }
        return -1;
    }
    public int partition(int[] nums,int left,int right,int pivot)
    {   int pivot_value=nums[pivot];
        int lesser_item_index=left;
        swap(nums,pivot,right);
        
        
        for(int i=left;i<right;i++)
            if(nums[i]<pivot_value)
            {
                swap(nums,lesser_item_index,i);
                lesser_item_index++;       
            }
        swap(nums,lesser_item_index,right);
        
        return lesser_item_index;
    }
    void swap(int[] nums,int left,int right)   
    {
        int t=nums[left];
        nums[left]=nums[right];
        nums[right]=t;
    }
}
