/*
169. Majority Element
Easy

2754

211

Add to List

Share
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/
class Solution {
    public int majorityElement(int[] nums) {
        
        return majority(nums,0,nums.length-1);
    }
    
    private int majority(int[] nums,int low, int high)
    {
             
        if(low==high)
            return nums[low];
        
        int mid=low+(high-low)/2;
        
        int left=majority(nums,low,mid);
        int right=majority(nums,mid+1,high);
   
        
        if(left==right)
            return left;
        
        int leftCount=count(nums,left,low,high);
        int rightCount=count(nums,right,low,high);
        
        return leftCount>rightCount ? left:right;
    }
    private int count(int[] nums,int num,int low,int high)
    {
        int count=0;
        
        for(int i=low;i<=high;i++)
        {
            if(nums[i]==num)
                count++;
        }
        return count;
    }
}
