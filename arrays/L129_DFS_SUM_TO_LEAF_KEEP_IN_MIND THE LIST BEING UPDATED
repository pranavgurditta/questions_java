/**

129. Sum Root to Leaf Numbers
Medium

1089

33

Add to List

Share
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> result =new ArrayList<List<Integer>>();
    public int sumNumbers(TreeNode root) {
        result=dfs(root,result,new ArrayList<Integer>(),0);
        int sum=0;
        for (List<Integer> one:result){
            int localSum=0;
            for(int i: one){
                localSum=localSum*10+i;
            }
            sum+=localSum;
        }
        return sum; 
    }
    int count=0;
    public List<List<Integer>> dfs(TreeNode root,List<List<Integer>> mainList,List<Integer> subList,int subSize)
    {
        if(root==null)
            return mainList;
        subList.add(subSize++,(root.val));
        if(root.left==null && root.right==null)
        {
            List<Integer> actualRootToLeaf=new ArrayList<Integer>();
            for (int i=0;i<subSize;i++)
            {
                actualRootToLeaf.add(subList.get(i));
            }
            mainList.add(actualRootToLeaf);
            
            
        }
        else
        {
        if(root.left!=null)
            dfs(root.left,mainList,subList,subSize);
        if(root.right!=null)
            dfs(root.right,mainList,subList,subSize); 
        }
        return mainList;
    }
}
