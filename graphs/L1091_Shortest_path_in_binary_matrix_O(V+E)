/*1091. Shortest Path in Binary Matrix
Medium

415

40

Add to List

Share
In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1

*/
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        if(grid[0][0] == 1 || grid[m-1][n-1] == 1 )
            return -1;
        Queue<Integer> q=new LinkedList<>();
        boolean[][] visited=new boolean[m][n];
        
        int[] dir={0,-1,0,1,1,-1,1,0,1,1,-1,-1,-1,0,-1,1};
        
        q.offer(0);
        q.offer(0);
        visited[0][0]=true;
        int answer=0;
        while(!q.isEmpty())
        {
            int s=q.size()/2;
            for(int k=0;k<s;k++)
            {
                int i=q.poll();
                int j=q.poll();
                if(i == m-1 && j == n-1)
                    return answer+1;
                
                for(int neighbours=0;neighbours<16;neighbours++)
                {
                    int next_i=dir[neighbours]+i;
                    int next_j=dir[++neighbours]+j;
                    
                    if(next_i>=0  && next_j>=0 && next_i<m && next_j<n && visited[next_i][next_j]==false &&                         grid[next_i][next_j]==0)
                    {
                        q.offer(next_i);
                        q.offer(next_j);
                        visited[next_i][next_j]=true;
                    }
                    
                }
                
               
            }
             answer++;
        }
        return -1;
    }
}
