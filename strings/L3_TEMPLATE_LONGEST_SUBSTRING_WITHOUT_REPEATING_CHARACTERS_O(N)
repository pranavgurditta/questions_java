/*3. Longest Substring Without Repeating Characters
Medium

9223

558

Add to List

Share
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             */
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] count=new int[128]; // to keep count of characters in the current window being considered
        int left=0; // left end of the sliding window
        int right=0; // right end of the sliding window
        int counter=0; 
        int maxLen=0;
        while(right<s.length())  
        {
            char right_char=s.charAt(right); 
            if(count[right_char]>0)  /* if the character is already present in the sliding window , we know                                         we should contract the window and hence we do counter++ so                                                 that left pointer is advanced and window contracts                                                         till the culprit which is repeating is removed from the left */
                counter++;
            
            count[right_char]++;    /* the count of character at right pointer is increased */
            right++;                /* increasing the right pointer */ 
            
            while(counter>0)        /* till the time counter is greater than 0 we have to advance the left                                        pointer as we have not yet found reached the left pointer which was                                           the actual repeating character  */
            {
                char left_char=s.charAt(left); 
                if(count[left_char]>1) /* if left pointer finds the actual repeating character it                                                       decrements the counter variable */
                     counter--; 
                count[left_char]--;    /* as soon as the variable is not in sliding window decrement its                                            count from the map or array */
                left++;
     
            }
            maxLen=Math.max(maxLen,right-left); /* check the maximum sliding window present at the end of each iteration , for max window out side the second loop , for min window inside the second loop */
        }
        return maxLen;
        
        /* The time complexity of this approach is O(2*s.length()) since each character maybe visited twice once by left and once by right pointer  */
    }
}
