/*
Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true
*/

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        
        HashMap<Character,Integer> count=new HashMap<Character,Integer>();
        for(int i=0;i<magazine.length();i++)
        {
        if(count.containsKey(magazine.charAt(i)))
            count.put(magazine.charAt(i),count.get(magazine.charAt(i))+1);
        else
            count.put((magazine.charAt(i)),1);
        
            
        }
       
        /* for(char s:count.keySet())
            System.out.println(s+" "+count.get(s));
            
            
            While using HashMap< ALWAYS MENTION CLASSES HERE ,NOT DATA TYPES>
            
            hashMap functions are:
            hash.keySet() to get all keys
            hash.values() to get all values
            
            */
        
        for(int i=0;i<ransomNote.length();i++)
        {
            if((!count.containsKey(ransomNote.charAt(i)) ) || count.get(ransomNote.charAt(i))==0)
                return false;
            else 
                 count.put(ransomNote.charAt(i),count.get(ransomNote.charAt(i))-1);
            
        }
        
        return true;
        
    }
}
