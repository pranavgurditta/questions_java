/*1221. Split a String in Balanced Strings
Easy

381

281

Add to List

Share
Balanced strings are those who have equal quantity of 'L' and 'R' characters.

Given a balanced string s split it in the maximum amount of balanced strings.

Return the maximum amount of splitted balanced strings.

 

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
Example 2:

Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.
Example 3:

Input: s = "LLLLRRRR"
Output: 1
Explanation: s can be split into "LLLLRRRR".
Example 4:

Input: s = "RLRRRLLRLL"
Output: 2
Explanation: s can be split into "RL", "RRRLLRLL", since each substring contains an equal number of 'L' and 'R'
 

Constraints:

1 <= s.length <= 1000
s[i] = 'L' or 'R'
Accepted
*/
class Solution {
    public int balancedStringSplit(String s) {
        char first=s.charAt(0);
        Stack<Character> stack=new Stack<Character>();
        int count=0;
    
        for(int i=0;i<s.length();i++)
        {
            
            if(stack.isEmpty())
                first=s.charAt(i);
            if(s.charAt(i)==first)
                stack.push(first);
            else
                stack.pop();
            
            if(stack.isEmpty())
            {
                
               
                count++;
            }
        }
        return count;
        
        
    }
}
