/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
            ListNode l3head=null;
            ListNode l3=null;
            while(l1!=null && l2!=null)
            {
                if(l1.val<=l2.val)
                {
                    if(l3==null)
                    {
                        l3=l3head=l1;
                        l1=l1.next;
                        
                    }
                    else
                    {   
                        l3.next=l1;
                        l1=l1.next;
                        l3=l3.next; 
                    }
                    
                    
                }
                
                
                else
                {
                    if(l3==null)
                    {
                        l3=l3head=l2;
                        l2=l2.next;
                    }
                    else
                    {   
                        l3.next=l2;
                        l2=l2.next;
                        l3=l3.next; 
                    }
                     
                }
            }
                while(l2!=null)
                {
                    if(l3==null)
                    {
                        l3=l3head=l2;
                        l2=l2.next;
                    }
                    else{
                    l3.next=l2;
                    l3=l3.next;
                    l2=l2.next;
                    }
                }
                while(l1!=null)
                {
                    if(l3==null)
                    {
                        l3=l3head=l1;
                        l1=l1.next;
                    }
                    else{
                    l3.next=l1;
                    l3=l3.next;
                    l1=l1.next;
                    }
                }  
            
        
            
        return l3head;
    }
}
