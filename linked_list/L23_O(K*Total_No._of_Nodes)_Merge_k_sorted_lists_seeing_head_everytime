/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head=null;
        int c=0;
        for(int i=0;i<lists.length;i++)
        {
            ListNode h=lists[i];
            while(h!=null)
            {
                c++;
                h=h.next;
            }
        }
        int index=0;
        ListNode current=null;
        while(c>0)
        {
            ListNode min=null;
            
            for(int i=0;i<lists.length;i++)
                if(lists[i]!=null)
                    min=lists[i];
            for(int i=0;i<lists.length;i++)
            {   
                
                if(lists[i]!=null)
                {   
                    
                    if(lists[i].val<=min.val)
                    {
                        
                        min=lists[i];
                        index=i;
                    }
                }
            }
            System.out.println(lists[index].val);
            if(lists[index]!=null)
            {ListNode temp= lists[index].next;
            
                lists[index] =temp;}
            c--;
            
            if(current==null)
               {head=min;
                current=head;}
            
            else
            {
                current.next=min;
                current=current.next;
            }
        }
        return head;    
    }
}
