/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        
        if(lists.length==1)
            return lists[0];
        if(lists.length==0)
            return null;
        ListNode head=mergeTwoLists(lists[0],lists[1]);
        
        for(int i=2;i<lists.length;i++)
        {
            head=mergeTwoLists(head,lists[i]);
        }
        return head;
    }
    public ListNode mergeTwoLists(ListNode l1,ListNode l2)
    {
        ListNode dummy=new ListNode(0);
        ListNode answer=dummy;
        
        while(l1!=null && l2!=null)
        {
            if(l1.val<l2.val)
            {
                dummy.next=l1;
                l1=l1.next;
                dummy=dummy.next;
            }
            else
            {
                
                dummy.next=l2;
                l2=l2.next;
                dummy=dummy.next;
            }
        }
        if(l1!=null)
        {
            dummy.next=l1;
        }
        if(l2!=null)
        {
            dummy.next=l2;
        }
        return answer.next;
    }

}
