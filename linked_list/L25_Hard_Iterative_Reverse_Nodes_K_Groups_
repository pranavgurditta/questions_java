/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

/*
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.
*/
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        if((head==null) || (head.next==null) || (k==1))
            return head;
        ListNode current=head;
        int c=0;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode begin=dummy;
        while(current!=null)
        {
            c++;
            if(c%k==0)
            {
            begin=reverse(begin,current.next);
            current=begin.next;
            }
            else
                current=current.next;
        }
        return dummy.next;
        
    }
    
       
        public ListNode reverse(ListNode begin,ListNode end)
        {
            
            ListNode temp=begin.next;
            ListNode prev=begin;
            ListNode first=temp;
            while(temp!=end)
            {
                ListNode temp2next=temp.next;
                temp.next=prev;
                prev=temp;
                temp=temp2next;
            
            }
            first.next=temp;
            begin.next=prev;
            return first;
            
        }
        
    
        

}
