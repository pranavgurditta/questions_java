/*L47: https://leetcode.com/problems/permutations-ii*/

class Solution {
    List<List<Integer>> mainList;
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        mainList=new ArrayList<List<Integer>>();
        permute_backtrack(mainList,new ArrayList<Integer>(),nums,new boolean[nums.length]);
        return mainList;
    }
    public void permute_backtrack( List<List<Integer>> mainList,List<Integer> tempList,int[] nums,boolean[] used)
    {
        if(tempList.size()==nums.length)
            mainList.add(new ArrayList<>(tempList));
        else
        {
            for(int i=0;i<nums.length;i++)
            {
                if(used[i] || (i>0 && nums[i]==nums[i-1] && !used[i-1]))
                    continue;
                used[i]=true;
                tempList.add(nums[i]);
                permute_backtrack(mainList,tempList,nums,used);
                used[i]=false;
                tempList.remove(tempList.size()-1);
                
            }
        }
    }

   
}
